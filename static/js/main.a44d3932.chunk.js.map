{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","moment","require","App","state","account","headerValue","openTime","closeTime","timezone","check","timeuntil","now","tz","date","format","storeOpenTime","storeCloseTime","isBefore","isAfter","isBetween","to","console","log","toString","replace","className","this","isOpen","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a44d3932.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nvar moment = require('moment-timezone');\nconst forextokyostart = \"9:00AM\";\nconst forextokyoend = \"6:00PM\";\nconst forexlondonstart = \"8:00AM\";\nconst forexlondonend = \"4:00PM\";\nconst forexnewyorkstart = \"8:00AM\";\nconst forexnewyorkend = \"4:00PM\";\nconst stonktokyostart =\"9:00AM\";\nconst stonktokyoend = \"15:00PM\";\nconst stonklondonstart =\"8:00AM\";\nconst stonklondonend = \"4:30PM\";\nconst stonknewyorkstart = \"9:30AM\";\nconst stonknewyorkend = \"4:00PM\";\nconst tokyozone = \"Asia/Tokyo\";\nconst londonzone = \"Europe/London\";\nconst newyorkzone = \"America/New_York\";\n\nclass App extends Component {\n  state = {\n    account: null,\n    headerValue: null\n  };\n\n  isOpen(openTime, closeTime, timezone) {\n\n    // handle special case\n    if (openTime === \"24HR\") {\n      return \"open\";\n    }\n\n    // get the current date and time in the given time zone\n    const now = moment.tz(timezone);\n\n    // Get the exact open and close times on that date in the given time zone\n    // See https://github.com/moment/moment-timezone/issues/119\n    const date = now.format(\"YYYY-MM-DD\");\n    const storeOpenTime = moment.tz(date + ' ' + openTime, \"YYYY-MM-DD h:mmA\", timezone);\n    const storeCloseTime = moment.tz(date + ' ' + closeTime, \"YYYY-MM-DD h:mmA\", timezone);\n\n    let check;\n    if (storeCloseTime.isBefore(storeOpenTime)) {\n      // Handle ranges that span over midnight\n      check = now.isAfter(storeOpenTime) || now.isBefore(storeCloseTime);\n    } else {\n      // Normal range check using an inclusive start time and exclusive end time\n      check = now.isBetween(storeOpenTime, storeCloseTime, null, '[)');\n    }\n    let timeuntil;\n    if (check) {\n      timeuntil = now.to(storeCloseTime);\n      console.log(timezone + now.to(storeCloseTime));\n      return check ? \"Open, closes   \" + timeuntil : \"closed\";\n    } else {\n\n      timeuntil = now.to(storeOpenTime);\n      console.log(timezone + now.to(storeOpenTime));\n      timeuntil = timeuntil.toString().replace(\"ago\", \"\");\n      return check ? \"Open \" : \"closed, opens  \" + timeuntil;\n    }\n  }\n\n  componentDidMount() {\n    // const zone = \"Asia/Tokyo\";\n    //console.log(\"now\", moment.tz(zone).format(\"h:mmA\"));\n    //console.log(\"9:00AM-6:00PM\", this.isOpen(forextokyostart, forextokyoend, tokyozone));\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-vertical is-8\">\n              <div className=\"tile\">\n                <div className=\"tile is-parent is-vertical\">\n                  <article className=\"tile is-child notification is-primary\">\n                    <p className=\"title\">Forex Tokyo</p>\n                    <p className=\"subtitle\">Open :{forextokyostart}</p>\n                    <p className=\"subtitle\">Close: {forextokyoend}</p>\n                    <p className=\"subtitle\">status: {this.isOpen(forextokyostart, forextokyoend, tokyozone)}</p>\n                  </article>\n                </div>\n                <div className=\"tile is-parent\">\n                  <article className=\"tile is-child notification is-primary\">\n                    <p className=\"title\">Forex London</p>\n                    <p className=\"subtitle\">Open :{forexlondonstart}</p>\n                    <p className=\"subtitle\">Close: {forexlondonend}</p>\n                    <p className=\"subtitle\">status: {this.isOpen(forexlondonstart, forexlondonend, londonzone)}</p>\n                  </article>\n                </div>\n\n                <div className=\"tile is-parent\">\n                  <article className=\"tile is-child notification is-primary\">\n                    <p className=\"title\">Forex New York</p>\n                    <p className=\"subtitle\">Open :{forexnewyorkstart}</p>\n                    <p className=\"subtitle\">Close: {forexnewyorkend}</p>\n                    <p className=\"subtitle\">status: {this.isOpen(forexnewyorkstart, forexnewyorkend, newyorkzone)}</p>\n                  </article>\n                </div>\n              </div>\n              <div className=\"tile\">\n                <div className=\"tile is-parent is-vertical\">\n                  <article className=\"tile is-child notification is-primary\">\n                    <p className=\"title\">STONK Tokyo</p>\n                    <p className=\"subtitle\">Open :{stonktokyostart}</p>\n                    <p className=\"subtitle\">Close: {stonktokyoend}</p>\n                    <p className=\"subtitle\">status: {this.isOpen(stonktokyostart, stonktokyoend, tokyozone)}</p>\n                  </article>\n                </div>\n                <div className=\"tile is-parent\">\n                  <article className=\"tile is-child notification is-primary\">\n                    <p className=\"title\">STONK London</p>\n                    <p className=\"subtitle\">Open :{stonklondonstart}</p>\n                    <p className=\"subtitle\">Close: {stonklondonend}</p>\n                    <p className=\"subtitle\">status: {this.isOpen(stonklondonstart, stonklondonend, londonzone)}</p>\n                  </article>\n                </div>\n\n                <div className=\"tile is-parent\">\n                  <article className=\"tile is-child notification is-primary\">\n                    <p className=\"title\">STONK London</p>\n                    <p className=\"subtitle\">Open :{stonknewyorkstart}</p>\n                    <p className=\"subtitle\">Close: {stonknewyorkend}</p>\n                    <p className=\"subtitle\">status: {this.isOpen(stonknewyorkstart, stonknewyorkend, newyorkzone)}</p>\n                  </article>\n                </div>\n              </div>\n\n            </div>\n          </div>\n\n        </header>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bulma/css/bulma.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}